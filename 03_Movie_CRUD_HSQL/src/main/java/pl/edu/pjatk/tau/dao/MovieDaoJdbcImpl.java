package pl.edu.pjatk.tau.dao;

import pl.edu.pjatk.tau.domain.Movie;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

public class MovieDaoJdbcImpl implements MovieDao {

    private Connection connection;
    private PreparedStatement addMovieStmt;
    private PreparedStatement getAllMoviesStmt;
    private PreparedStatement getMovieStmt;


    public MovieDaoJdbcImpl() throws SQLException {
    }

    public MovieDaoJdbcImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }

        setConnection(connection);
    }

    public void createTables() throws SQLException {
        connection.createStatement()
                .executeUpdate("CREATE TABLE " +
                        "Movie" +
                        "(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                        "title varchar(20) NOT NULL," +
                        "duration integer)");
    }

    private boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Movie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public int addMovie(Movie movie) {
        int count = 0;
        try {
            addMovieStmt.setString(1, movie.getTitle());
            addMovieStmt.setInt(2, movie.getDuration());
            count = addMovieStmt.executeUpdate();
            ResultSet generatedKeys = addMovieStmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                movie.setId(generatedKeys.getLong(1));
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<Movie> getAllMovies() {
        List<Movie> moviess = new LinkedList<>();
        try {
            ResultSet rs = getAllMoviesStmt.executeQuery();

            while (rs.next()) {
                Movie m = new Movie();
                m.setId(rs.getLong("id"));
                m.setTitle(rs.getString("title"));
                m.setDuration(rs.getInt("duration"));
                moviess.add(m);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return moviess;
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addMovieStmt = connection.prepareStatement(
                "INSERT INTO Movie (title, duration) VALUES (?, ?)",
                Statement.RETURN_GENERATED_KEYS);
        getAllMoviesStmt = connection.prepareStatement("SELECT id, title, duration FROM Movie ORDER BY id");
        getMovieStmt = connection.prepareStatement("SELECT id, title, duration FROM Movie WHERE id = ?");
    }

    @Override
    public Movie getMovie(long id) throws SQLException {
        try {
            getMovieStmt.setLong(1, id);
            ResultSet rs = getMovieStmt.executeQuery();

            if (rs.next()) {
                Movie p = new Movie();
                p.setId(rs.getLong("id"));
                p.setTitle(rs.getString("title"));
                p.setDuration(rs.getInt("duration"));
                return p;
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        throw new SQLException("Movie with id " + id + " does not exist");
    }
}
